#!/usr/bin/env python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import absolute_import
from __future__ import print_function
import sys
import boto3
from ansible.module_utils.basic import AnsibleModule

DOCUMENTATION = '''
---
module: ec2_lookup
short_description: returns a list of ec2 instances that meet search criteria
description:
     - Returns a list of ec2 instances that meet search criteria
version_added: "1.4"
options:
  region:
    description:
      - The AWS region to use.  Must be specified if ec2_url
        is not used.  If not specified then the value of
        the EC2_REGION environment variable, if any, is used.
    required: false
    default: null
    aliases: [ 'aws_region', 'ec2_region' ]
  aws_secret_key:
    description:
      - AWS secret key. If not set then the value of
        the AWS_SECRET_KEY environment variable is used.
    required: false
    default: null
    aliases: [ 'ec2_secret_key', 'secret_key' ]
  aws_access_key:
    description:
      - AWS access key. If not set then the value of
        the AWS_ACCESS_KEY environment variable is used.
    required: false
    default: null
    aliases: [ 'ec2_access_key', 'access_key' ]
  tags:
    description:
      - tags to lookup
    required: false
    default: null
    type: dict
    aliases: []

requirements: [ "boto3" ]
author: John Jarvis
'''

EXAMPLES = '''
# Note: None of these examples set aws_access_key, aws_secret_key, or region.
# It is assumed that their matching environment variables are set.

# Return all instances that match the tag "Name: foo"
- local_action:
    module: ec2_lookup
    tags:
        Name: foo
'''

AWS_REGIONS = ['ap-northeast-1',
               'ap-southeast-1',
               'ap-southeast-2',
               'eu-west-1',
               'sa-east-1',
               'us-east-1',
               'us-west-1',
               'us-west-2']

def main():
    module = AnsibleModule(
        argument_spec=dict(
            ec2_url=dict(),
            region=dict(aliases=['aws_region', 'ec2_region'],
                        choices=AWS_REGIONS),
            aws_secret_key=dict(aliases=['ec2_secret_key', 'secret_key'],
                                no_log=True),
            aws_access_key=dict(aliases=['ec2_access_key', 'access_key']),
            tags=dict(default=None, type='dict'),
        )
    )

    aws_secret_key = module.params.get('aws_secret_key')
    aws_access_key = module.params.get('aws_access_key')
    region = module.params.get('region')
    ec2_url = module.params.get('ec2_url')

    # If region is specified, create a session with boto3 and connect to the EC2 service
    if region:
        try:
            ec2 = boto3.resource('ec2', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
        except Exception as e:
            module.fail_json(msg=f"Error connecting to AWS EC2: {str(e)}")
    else:
        module.fail_json(msg="Region must be specified")

    # If EC2 URL is provided, it can be used for connection
    if ec2_url:
        module.fail_json(msg="ec2_url is not supported in boto3 connection. Please use region instead.")

    instances = []
    instance_ids = []

    # Get all instances with the specified tags
    filters = {'tag:' + tag: value for tag, value in module.params.get('tags', {}).items()}
    try:
        instances_query = ec2.instances.filter(Filters=[{'Name': f'tag:{tag}', 'Values': [value]} for tag, value in filters.items()])
        for instance in instances_query:
            if instance.state['Name'] == 'running':
                instances.append({k: v for k, v in instance.__dict__.items() if isinstance(v, str)})
                instance_ids.append(instance.id)
    except Exception as e:
        module.fail_json(msg=f"Error querying EC2 instances: {str(e)}")

    module.exit_json(changed=False, instances=instances, instance_ids=instance_ids)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
