#!/usr/bin/env bash

# {{ ansible_managed }}

{% set edxapp_venv_bin = edxapp_venv_dir + "/bin" %}

{% set executable = edxapp_venv_bin + '/gunicorn' %}

{% if COMMON_ENABLE_NEWRELIC_APP %}
{% set executable = edxapp_venv_bin + '/newrelic-admin run-program ' + executable %}

export NEW_RELIC_DISTRIBUTED_TRACING_ENABLED="{{ EDXAPP_CMS_ENABLE_NEWRELIC_DISTRIBUTED_TRACING }}"
export NEW_RELIC_APP_NAME="{{ EDXAPP_NEWRELIC_CMS_APPNAME }}"
export NEW_RELIC_CONFIG_FILE="{{ edxapp_app_dir }}/newrelic.ini"
if command -v ec2metadata >/dev/null 2>&1; then
  INSTANCEID=$(ec2metadata --instance-id);
  HOSTNAME=$(hostname)
  export NEW_RELIC_PROCESS_HOST_DISPLAY_NAME="$HOSTNAME-$INSTANCEID"
fi
export NEW_RELIC_LICENSE_KEY="{{ NEWRELIC_LICENSE_KEY }}"
{% endif -%}

{% if EDXAPP_DATADOG_ENABLE %}
{% set executable = edxapp_venv_bin + '/ddtrace-run ' + executable %}
export DD_TAGS="service:edx-edxapp-cms version:{{ app_version }}"
export DD_DJANGO_USE_HANDLER_RESOURCE_FORMAT=true
# Copied from edx_django_service playbook for consistency; Datadog
# trace debug logging issue doesn't actually affect edxapp for some
# reason.
export DD_TRACE_LOG_STREAM_HANDLER=false
# Datadog's instrumentation breaks pymongo: https://github.com/edx/edx-arch-experiments/issues/580
export DD_TRACE_PYMONGO_ENABLED=false

# Temporary: Include span tags representing a variety of tracing HTTP headers.
# This might help us (or DD support) identify an interaction with incoming trace
# headers that causes trace concatenation in edxapp.
# See https://github.com/edx/edx-arch-experiments/issues/692
DD_TRACE_HEADER_TAGS=tracecontext:tracecontext,tracestate:tracestate,x-datadog-trace-id:x-datadog-trace-id,x-datadog-parent-id:x-datadog-parent-id
# Temporary: We currently have a span (or several) for each Django middleware,
# and Datadog Support has implied that it will be easier to debug our tracing
# issues if we don't record those middleware. (They make up the bulk of traces,
# at least visually.)
# See https://github.com/edx/edx-arch-experiments/issues/692
DD_DJANGO_INSTRUMENT_MIDDLEWARE=false
{% endif -%}

export PORT="{{ edxapp_cms_gunicorn_port }}"
export ADDRESS="{{ edxapp_cms_gunicorn_host }}"
export LANG="{{ EDXAPP_LANG }}"
export DJANGO_SETTINGS_MODULE="{{ EDXAPP_CMS_ENV }}"
export SERVICE_VARIANT="cms"
export PATH="{{ edxapp_deploy_path }}"
export BOTO_CONFIG="{{ edxapp_app_dir }}/.boto"
export EDX_REST_API_CLIENT_NAME="{{ COMMON_ENVIRONMENT }}-{{ COMMON_DEPLOYMENT }}-studio"

source {{ edxapp_app_dir }}/edxapp_env
# We exec so that gunicorn is the child of supervisor and can be managed properly
exec {{ executable }} -c {{ edxapp_app_dir }}/cms_gunicorn.py {{ EDXAPP_CMS_GUNICORN_EXTRA }} cms.wsgi
