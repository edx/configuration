#!/usr/bin/env bash

# {{ ansible_managed }}

{% set edxapp_venv_bin = edxapp_venv_dir + "/bin" %}
source {{ edxapp_app_dir }}/edxapp_env
{% set executable = edxapp_venv_bin + '/celery' %}

{% if EDXAPP_DATADOG_ENABLE %}
{% set executable = edxapp_venv_bin + '/ddtrace-run ' + executable %}
export DD_TAGS="service:edx-edxapp-${SERVICE_VARIANT}-workers queue:${QUEUE_NAME} version:ec2-{{ app_version }}"
export DD_DJANGO_USE_LEGACY_RESOURCE_FORMAT=true
export DD_GIT_COMMIT_SHA="{{ app_version }}"
export DD_GIT_REPOSITORY_URL="{{ EDXAPP_REPOSITORY_GIT_URL }}"
export DD_LOGS_INJECTION=true
export DD_SERVICE="edx-edxapp-${SERVICE_VARIANT}-workers"
# Copied from edx_django_service playbook for consistency; Datadog
# trace debug logging issue doesn't actually affect edxapp for some
# reason.
export DD_TRACE_LOG_STREAM_HANDLER=false

# Suppress middleware spans because there are about 100 for each request.
# Remove (or set to true) for debugging.
export DD_DJANGO_INSTRUMENT_MIDDLEWARE=false

{% if COMMON_ENVIRONMENT == "stage" %}
# Temporary 2025-01-09: Enable Celery distributed tracing to see if it
# has an effect on the remaining orphaned spans.
# https://github.com/edx/edx-arch-experiments/issues/822
export DD_CELERY_DISTRIBUTED_TRACING=true
{% endif %}

{% endif -%}

# We want to be able to toggle this on separately from DD in general.
{% if EDXAPP_DATADOG_PROFILING_ENABLE %}
export DD_PROFILING_ENABLED=true
export DD_PROFILING_MEMORY_ENABLED=true
{% endif -%}

{% if EDXAPP_DATADOG_INFERRED_SERVICES_ENABLE %}
export DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED=true
{% endif -%}

# We exec so that celery is the child of supervisor and can be managed properly

exec {{ executable }} $@
